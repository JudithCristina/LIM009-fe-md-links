
var renderer = {

    "default": function(code) {
        return "<code>" + code + "</code>";
    },

    codespan: function(code) {
        if(!code) return "";

        if(code.length > 1) {
            switch (code[0]) {
                // Special syntax.
                case "~":   return renderer.tilde(code.substr(1));
                // User related syntax.
                case "@":   return renderer.monkeytail(code.substr(1));
                // Default option.
                default:    return renderer.default(code);
            }
        } else {
            if(code == "~") return renderer.streamich();
            return renderer.default(code);
        }
    },

    tilde: function(code) {
        // Cancel special syntax with double tilde `~~tilde syntax cancelled`
        if(code[0] == "~") return renderer.default(code);

        var pos = code.indexOf(" ");
        if(pos > -1) {
            return renderer.tildeWithLang(code.substr(0, pos), code.substr(pos + 1));
        } else {
            return renderer.stream(code);
        }
    },

    tildeWithLang: function(lang, value) {
        switch(lang) {
            case "key":
            case "k":
                return renderer.key(value);
            case "math":
            case "m":
            case "M":
                return renderer.tildeGeneral("math", value);
            case "sup":
            case "^":
                return renderer.sup(value);
            case "sub":
            case "_":
                return renderer.sub(value);
            case "ins":
                return renderer.ins(value);
            case "tt":
                return renderer.tt(value);
            case "small":
                return renderer.small(value);
            case "a":
                return renderer.anchor(value);
            default:
                return renderer.tildeGeneral(lang, value);
        }
    },

    tildeGeneral: function(lang, value) {
        return '<code class="lang-' + lang + ' lang-inl-' + lang + '">' + value + '</code>';
    },

    key: function(key) {
        return "<kbd>" + key + "</kbd>";
    },

    sup: function(value) {
        return "<sup>" + value + "</sup>";
    },

    sub: function(value) {
        return "<sub>" + value + "</sub>";
    },

    ins: function(value) {
        return "<ins>" + value + "</ins>";
    },

    tt: function(value) {
        return "<tt>" + value + "</tt>";
    },

    small: function(value) {
        return "<small>" + value + "</small>";
    },

    anchor: function(name) {
        return '<a name="' + name + '"></a>';
    },

    stream: function(stream) {
        return '<code class="handle handle-stream">~' + stream + '</code>';
//        return '<code class="handle handle-stream">' +
//            '<span class="prefix">~</span>' +
//            '<span class="handle">' + stream + '</span>' +
//        '</code>';
    },

    monkeytail: function(code) {
        // Cancel special syntax with double tilde `@@tilde syntax cancelled`
        if(code[0] == "@") return renderer.default(code);

        if(code.indexOf(" ") > -1) { return renderer.default(code); }
        else {
            return renderer.user(code);
        }
    },

    user: function(user) {
        return '<code class="handle handle-user">@' + user + '</code>';
    },

    streamich: function() {
        return '<code class="handle handle-streamich">~streamich</code>';
    }
};

module.exports = renderer.codespan;